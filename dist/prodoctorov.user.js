// ==UserScript==
// @name         Prodoctorov List Clean
// @description  Remove profile cards by filter
// @match        https://prodoctorov.ru/*
// @namespace    https://github.com/reliable-code/product-list-filters
// @version      0.6.73230234
// @icon         https://www.google.com/s2/favicons?sz=64&domain=prodoctorov.ru
// @author       reliable-code
// ==/UserScript==

(()=>{"use strict";


class InputValueBase{constructor(value,onChange){this.value=value;this.onChange=onChange}onChangeIfDefined=()=>{this.onChange&&this.onChange()}}


function getInputValueFromEvent(event){const{target}=event;const{type}=target;switch(type){case"text":return`"${target.value}"`;case"number":return target.value;case"checkbox":return target.checked;default:console.log(`Unknown input type: ${type}`);return null}}


function parseValue(value){return value===""?null:JSON.parse(value)}


const storage=localStorage;function getStorageValueOrDefault(key,defaultValue=null){const localStorageItem=storage.getItem(key);return localStorageItem===null?defaultValue:parseValue(localStorageItem)}class StoredInputValue extends InputValueBase{constructor(storageKey,defaultValue=null,onChange=null){super(getStorageValueOrDefault(storageKey,defaultValue),onChange);this.storageKey=storageKey}updateValueFromEvent=event=>{const newValue=getInputValueFromEvent(event);const newParsedValue=parseValue(newValue);if(this.value===newParsedValue)return;storage.setItem(this.storageKey,newValue);this.value=newParsedValue;this.onChangeIfDefined()}}function debounce(func,wait=250){let timeoutId;return(...args)=>{clearTimeout(timeoutId);timeoutId=setTimeout((()=>func(...args)),wait)}}function removeNonNumber(stringValue){return stringValue.replace(/[^\d.,-]/g,"")}


function getFirstElement(selector,parentNode=document,logNotFound=false){const element=parentNode.querySelector(selector);logNotFound&&!element&&console.log(`No element found for selector: ${selector}`);return element}function helpers_getAllElements(selector,parentNode=document,logNotFound=false){const elements=parentNode.querySelectorAll(selector);logNotFound&&!elements.length&&console.log(`No elements found for selector: ${selector}`);return elements}function getElementInnerNumber(element,cleanText=false,replaceComma=false,defaultValue=null){if(!element){if(defaultValue!==null)return defaultValue;console.log("No element found")}const elementText=element.innerText;return parseNumber(elementText,cleanText,replaceComma)}function parseNumber(text,cleanText,replaceComma){cleanText&&(text=removeNonNumber(text));replaceComma&&(text=text.replace(",","."));const number=+text;return number}function applyStyles(element,styles){Object.entries(styles).forEach((([key,value])=>{element.style[key]=value}))}


function createTextInput(inputOnChange,inputStyle,inputValue){const input=createInput("text",inputOnChange,inputStyle);input.value=inputValue;return input}function createNumberInput(inputOnChange,inputStyle,inputValue,inputStep,inputMinValue,inputMaxValue){const input=createInput("number",inputOnChange,inputStyle);input.value=inputValue;input.step=inputStep;input.min=inputMinValue;input.max=inputMaxValue;return input}function createCheckboxInput(inputOnChange,inputStyle,isChecked){const input=createInput("checkbox",inputOnChange,inputStyle);input.checked=isChecked;return input}function createInput(type=null,inputOnChange=null,style=null){const input=document.createElement("input");type&&(input.type=type);if(inputOnChange){input.addEventListener("keyup",debounce(inputOnChange,200));input.addEventListener("change",debounce(inputOnChange,100))}style&&(input.style=style);return input}function createLink(styles={},innerHTML=null,href=null){const link=createElement("a",styles,innerHTML);href&&(link.href=href);return link}
// todo: replace usages with createDiv()
function createDivObsolete(textContent=null,style=null){const div=document.createElement("div");textContent&&(div.textContent=textContent);style&&(div.style=style);return div}function createDiv(styles={},innerHTML=null){return createElement("div",styles,innerHTML)}function createElement(tagName,styles,innerHTML=null){const element=document.createElement(tagName);Object.keys(styles).length>0&&applyStyles(element,styles);innerHTML&&(element.innerHTML=innerHTML);return element}


function appendFilterControlsIfNeeded(parentNode,appendFiltersContainerFunc,force=false,filtersContainerId="customFiltersContainer"){let filtersContainer=getFirstElement(`#${filtersContainerId}`,parentNode);if(filtersContainer){if(!force)return;filtersContainer.remove()}filtersContainer=createDiv();filtersContainer.id=filtersContainerId;appendFiltersContainerFunc(filtersContainer,parentNode)}


function getURLPathElement(position,defaultValue="common",logResult=false){const{pathname}=window.location;return getPathnameElement(pathname,position,defaultValue,logResult)}function getPathnameElement(pathname,position,defaultValue,logResult=false){const pathElements=pathname.split("/");const pathElement=pathElements[position]||defaultValue;logResult&&console.log(`Pathname element: ${pathElement}`);return pathElement}


function isNotMatchTextFilter(parameterValue,filter){return!isMatchTextFilter(parameterValue,filter)}function isMatchTextFilter(parameterValue,filter){if(!filter.value)return true;const comparedString=parameterValue.toLowerCase();const searchStrings=filter.value.toLowerCase().split(",").map((searchString=>searchString.trim()));const{include:includeSearchStrings,notInclude:notIncludeSearchStrings}=searchStrings.reduce(((result,searchString)=>{if(searchString.startsWith("!")){const notIncludeSearchString=searchString.substring(1);notIncludeSearchString.length&&result.notInclude.push(notIncludeSearchString)}else result.include.push(searchString);return result}),{include:[],notInclude:[]});return includeSearchStrings.every((searchString=>comparedString.includes(searchString)))&&notIncludeSearchStrings.every((searchString=>!comparedString.includes(searchString)))}function isLessThanFilter(parameterValue,filter){return filter.value&&parameterValue<filter.value}


function createFilterControlText(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDivObsolete(titleText,controlStyle);const input=createTextInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createFilterControlNumber(titleText,inputValue,inputStep,inputMinValue,inputMaxValue,controlStyle=null,inputStyle=null){const filterControl=createDivObsolete(titleText,controlStyle);const input=createNumberInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value,inputStep,inputMinValue,inputMaxValue);filterControl.append(input);return filterControl}function createFilterControlCheckbox(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDivObsolete(titleText,controlStyle);const input=createCheckboxInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createMinReviewsFilterControl(inputValue,controlStyle=null,inputStyle=null){return createReviewsFilterControl("Мин. отзывов: ",inputValue,controlStyle,inputStyle)}function createReviewsFilterControl(titleText,inputValue,controlStyle=null,inputStyle=null){return createFilterControlNumber(titleText,inputValue,"1","1","999999",controlStyle,inputStyle)}function createEnabledFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlCheckbox("Вкл: ",inputValue,controlStyle,inputStyle)}function hideElement(element){setElementDisplayAttributeIfNeeded(element);setElementDisplay(element,"none")}function showElement(element,display){display=display||getElementDisplay(element);setElementDisplay(element,display)}function showHideElement(element,conditionToHide,display){if(conditionToHide)hideElement(element);else{display=display||getElementDisplay(element);showElement(element,display)}}function setElementDisplay(element,display){element.style.display=display}function getElementDisplay(element){setElementDisplayAttributeIfNeeded(element);return element.getAttribute("display")}function setElementDisplayAttributeIfNeeded(element){if(element.hasAttribute("display"))return;const{display}=getComputedStyle(element);element.setAttribute("display",display)}


const APPOINTMENTS_PAGE=".appointments_page";const DOCTOR_CARD_SELECTOR=".b-doctor-card";const DOCTOR_CARD_NAME_SELECTOR=".b-doctor-card__name-surname";const ADDITIONAL_LINKS_APPENDED_CLASS="additionalLinksAppended";const DOCTOR_DETAILS_MENU_SELECTOR=".b-doctor-details__toc";const CATEGORY_NAME=getURLPathElement(2);const specFilter=new StoredInputValue(`${CATEGORY_NAME}-spec-filter`,null);const clinicFilter=new StoredInputValue(`${CATEGORY_NAME}-clinic-filter`,null);const minReviewsFilter=new StoredInputValue("min-reviews-filter",10);const minExperienceFilter=new StoredInputValue("min-experience-filter",5);const filterEnabled=new StoredInputValue("filter-enabled",true);const appointmentsPage=getFirstElement(APPOINTMENTS_PAGE);if(appointmentsPage)setInterval(initListClean,100);else{appendDoctorPageAdditionalLinks();appendReviewsInfoToHeader();appendDoctorContactLink();clickMoreReviewsButtonWhileExists()}function initListClean(){
// removeSpecialPlacementCards();
appendFilterControlsIfNeeded(appointmentsPage,appendFiltersContainer);cleanList()}function appendFiltersContainer(filtersContainer,parentNode){filtersContainer.style="display: flex;"+"grid-gap: 15px;"+"margin-top: 5px;"+"font-size: 15px;";const controlStyle="display: flex;"+"align-items: center;";const inputStyle="margin: 0px 4px;";const textInputStyle=inputStyle+// eslint-disable-line prefer-template
"width: 180px;";const numberInputStyle=inputStyle+// eslint-disable-line prefer-template
"width: 45px;";const checkboxInputStyle=inputStyle+// eslint-disable-line prefer-template
"width: 20px;"+"height: 20px;";const specFilterDiv=createFilterControlText("Специализация:",specFilter,controlStyle,textInputStyle);const clinicFilterDiv=createFilterControlText("Клиника:",clinicFilter,controlStyle,textInputStyle);const minReviewsDiv=createMinReviewsFilterControl(minReviewsFilter,controlStyle,numberInputStyle);const minExperienceDiv=createFilterControlNumber("Мин. опыт: ",minExperienceFilter,"1","0","100",controlStyle,numberInputStyle);const filterEnabledDiv=createEnabledFilterControl(filterEnabled,controlStyle,checkboxInputStyle);filtersContainer.append(specFilterDiv,clinicFilterDiv,minReviewsDiv,minExperienceDiv,filterEnabledDiv);parentNode.prepend(filtersContainer)}function cleanList(){const doctorCards=helpers_getAllElements(DOCTOR_CARD_SELECTOR,appointmentsPage);doctorCards.forEach((doctorCard=>{if(!filterEnabled.value){showElement(doctorCard);return}const profileCard=getFirstElement(".b-profile-card",doctorCard,true);const reviewsLink=getFirstElement(":scope > a",profileCard);const experienceWrap=getFirstElement(".b-doctor-card__experience .mr-2 .ui-text",doctorCard,true);if(!reviewsLink||!experienceWrap){hideElement(doctorCard);return}const specWrap=getFirstElement(".b-doctor-card__spec",doctorCard,true);const specInfo=specWrap.innerText.trim();const clinicContainer=getFirstElement("div.b-doctor-card__lpu-select",doctorCard,true);const clinicWrap=getFirstElement(".b-select__trigger-main-text",clinicContainer,true);const clinicName=clinicWrap.innerText.trim();const reviewsLinkNumber=getElementInnerNumber(reviewsLink,true);const experienceNumber=getElementInnerNumber(experienceWrap,true);const conditionToHide=isNotMatchTextFilter(specInfo,specFilter)||isNotMatchTextFilter(clinicName,clinicFilter)||isLessThanFilter(reviewsLinkNumber,minReviewsFilter)||isLessThanFilter(experienceNumber,minExperienceFilter);showHideElement(doctorCard,conditionToHide);const doctorCardName=getFirstElement(DOCTOR_CARD_NAME_SELECTOR,doctorCard,true);const doctorName=doctorCardName.innerText;appendAdditionalLinks(doctorName,profileCard)}))}function appendAdditionalLinks(doctorName,linksContainer){if(linksContainer.classList.contains(ADDITIONAL_LINKS_APPENDED_CLASS))return;appendAdditionalLink(doctorName,linksContainer,"НаПоправку");appendAdditionalLink(doctorName,linksContainer,"DocDoc");appendAdditionalLink(doctorName,linksContainer,"Докту");linksContainer.classList.add(ADDITIONAL_LINKS_APPENDED_CLASS)}function appendAdditionalLink(doctorName,linksContainer,siteName){const searchString=`${doctorName} ${siteName}`;const encodedSearchString=encodeURIComponent(searchString);const lineBreak=document.createElement("br");const href=`https://www.google.com/search?q=${encodedSearchString}&btnI`;const searchUrlLink=createLink({},siteName,href);linksContainer.append(lineBreak,searchUrlLink)}function appendDoctorPageAdditionalLinks(){const doctorCardName=getFirstElement('.b-doctor-intro__title-first-line [itemprop="name"]',document,true);if(doctorCardName){const doctorName=doctorCardName.innerText.trim();const linksContainer=createDiv();linksContainer.style.textAlign="center";const doctorIntroLeft=getFirstElement(".b-doctor-intro__left-side");doctorIntroLeft.append(linksContainer);appendAdditionalLinks(doctorName,linksContainer)}}function appendReviewsInfoToHeader(){const reviewsFilter=getFirstElement(".reviews-filter:not(.b-reviews-page__filter)");if(!reviewsFilter)return;const nameSpanHolder=getFirstElement(".b-doctor-intro__title-first-line",document,true);if(!nameSpanHolder)return;const nameSpan=getFirstElement('[itemprop="name"]',nameSpanHolder,true);if(!nameSpan)return;const reviewsInfo=createDiv();reviewsInfo.style.position="absolute";reviewsInfo.classList.add("v-application");const reviewsInfoWrap=createDiv();reviewsInfoWrap.style.position="relative";reviewsInfoWrap.style.height="45px";reviewsInfoWrap.append(reviewsInfo);const reviewsFilterSpans=helpers_getAllElements(":scope > span",reviewsFilter,true);const lastReviewsFilterSpansIndex=reviewsFilterSpans.length-1;for(let i=1;i<=lastReviewsFilterSpansIndex;i+=1){const reviewsFilterSpan=reviewsFilterSpans[i];const reviewsFilterSpanCopy=reviewsFilterSpan.cloneNode(true);reviewsFilterSpanCopy.addEventListener("click",scrollToParentAndClick(reviewsFilterSpan));reviewsInfo.append(reviewsFilterSpanCopy)}nameSpan.append(reviewsInfoWrap)}function scrollToParentAndClick(element){return()=>{element.parentNode.scrollIntoView({behavior:"smooth"});element.click()}}function appendDoctorContactLink(){const doctorContacts=getFirstElement("#doctor-contacts");if(!doctorContacts)return;const doctorDetailsMenu=[...helpers_getAllElements(DOCTOR_DETAILS_MENU_SELECTOR)].pop();if(!doctorDetailsMenu)return;doctorDetailsMenu.style.position="sticky";doctorDetailsMenu.style.top="16px";const doctorContactsLinkTitle=createDiv({},"Место работы");doctorContactsLinkTitle.classList.add("b-doctor-details__toc-title");const doctorContactsLink=createLink({},null,"#doctor-contacts");doctorContactsLink.append(doctorContactsLinkTitle);doctorContactsLink.classList.add("b-doctor-details__toc-item");doctorDetailsMenu.insertBefore(doctorContactsLink,doctorDetailsMenu.firstChild)}function clickMoreReviewsButtonWhileExists(){const moreReviewsButton=getFirstElement('[data-qa="show_more_list_items"]');moreReviewsButton&&!moreReviewsButton.classList.contains("d-none")&&moreReviewsButton.click();setTimeout(clickMoreReviewsButtonWhileExists,250)}})();