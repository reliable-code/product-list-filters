// ==UserScript==
// @name         Megamarket List Clean
// @description  Remove product cards by filter
// @match        https://megamarket.ru/*
// @namespace    https://github.com/reliable-code/product-list-filters
// @version      0.1.69997775
// @icon         https://www.google.com/s2/favicons?sz=64&domain=megamarket.ru
// @author       reliable-code
// ==/UserScript==

(()=>{"use strict";function removeNonNumber(stringValue){return stringValue.replace(/[^\d.,-]/g,"")}


function getFirstElement(selector,parentNode=document,logNotFound=false){const element=parentNode.querySelector(selector);logNotFound&&!element&&console.log(`No element found for selector: ${selector}`);return element}function getAllElements(selector,parentNode=document,logNotFound=false){const elements=parentNode.querySelectorAll(selector);logNotFound&&!elements.length&&console.log(`No elements found for selector: ${selector}`);return elements}function hideElement(element){setElementDisplay(element,"none")}function showElement(element,display="block"){setElementDisplay(element,display)}function showHideElement(element,conditionToHide,display="block"){conditionToHide?hideElement(element):showElement(element,display)}function setElementDisplay(element,display){element.style.display=display}function createInput(type=null,inputOnChange=null,style=null){const input=document.createElement("input");type&&(input.type=type);inputOnChange&&input.addEventListener("change",inputOnChange);style&&(input.style=style);return input}function createNumberInput(inputOnChange,inputStyle,inputValue,inputStep,inputMinValue,inputMaxValue){const input=createInput("number",inputOnChange,inputStyle);input.value=inputValue;input.step=inputStep;input.min=inputMinValue;input.max=inputMaxValue;return input}function createCheckboxInput(inputOnChange,inputStyle,isChecked){const input=createInput("checkbox",inputOnChange,inputStyle);input.checked=isChecked;return input}function createDiv(textContent=null,style=null){const div=document.createElement("div");textContent&&(div.textContent=textContent);style&&(div.style=style);return div}function getElementInnerNumber(element,cleanText=false,replaceComma=false){let elementText=element.innerText;cleanText&&(elementText=removeNonNumber(elementText));replaceComma&&(elementText=elementText.replace(",","."));const elementNumber=+elementText;return elementNumber}function getInputValueFromEvent(event){const{target}=event;const{type}=target;let inputValue;if(type==="number")inputValue=target.value;else{if(type!=="checkbox"){console.log(`Unknown input type: ${type}`);return null}inputValue=target.checked}return parseValue(inputValue)}class InputValueBase{constructor(value,onChange){this.value=value;this.onChange=onChange}onChangeIfDefined=()=>{this.onChange&&this.onChange()}}class InputValue extends InputValueBase{constructor(defaultValue=null,onChange=null){super(defaultValue,onChange)}updateValueFromEvent=event=>{this.value=getInputValueFromEvent(event);this.onChangeIfDefined()}}function parseValue(value){return value===""?null:JSON.parse(value)}


const storage=localStorage;function getStorageValueOrDefault(key,defaultValue){const localStorageItem=storage.getItem(key);return localStorageItem===null?defaultValue:parseValue(localStorageItem)}function setStorageValueFromEvent(event,keyName){const inputValue=getInputValueFromEvent(event);storage.setItem(keyName,inputValue);return inputValue}class StorageValue extends InputValueBase{constructor(storageKey,defaultValue=null,onChange=null){super(getStorageValueOrDefault(storageKey,defaultValue),onChange);this.storageKey=storageKey}updateValueFromEvent=event=>{this.value=setStorageValueFromEvent(event,this.storageKey);this.onChangeIfDefined()}}


function createFilterControlNumber(titleText,inputValue,inputStep,inputMinValue,inputMaxValue,controlStyle=null,inputStyle=null){const filterControl=createDiv(titleText,controlStyle);const input=createNumberInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value,inputStep,inputMinValue,inputMaxValue);filterControl.append(input);return filterControl}function createFilterControlCheckbox(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDiv(titleText,controlStyle);const input=createCheckboxInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createMinCashbackFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlNumber("Минимальный кешбек: ",inputValue,"5","0","100",controlStyle,inputStyle)}function createMaxPriceFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlNumber("Максимальная цена: ",inputValue,"500","0","1000000",controlStyle,inputStyle)}function createEnabledFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlCheckbox("Вкл: ",inputValue,controlStyle,inputStyle)}function appendFilterControlsIfNeeded(parentNode,appendFiltersContainerFunc,filtersContainerId="customFiltersContainer"){let filtersContainer=getFirstElement(`#${filtersContainerId}`,parentNode);if(filtersContainer)return;filtersContainer=createDiv();filtersContainer.id=filtersContainerId;appendFiltersContainerFunc(filtersContainer,parentNode)}function isLessThanFilter(parameterValue,filter){return filter.value&&parameterValue<filter.value}function isGreaterThanFilter(parameterValue,filter){return filter.value&&parameterValue>filter.value}


const minCashbackFilter=new StorageValue("min-cashback-filter");const maxPriceFilter=new StorageValue("max-price-filter");const filterEnabled=new InputValue(false);const PRODUCT_CARD_LIST_HEADER=".catalog-listing-header";const PRODUCT_CARD_SELECTOR=".catalog-item";const PRODUCT_CARD_PRICE_SELECTOR=".item-price";const PRODUCT_CARD_CASHBACK_SELECTOR=".bonus-percent";const PRICE_ATTR="price";const BALANCED_CASHBACK_PRICE_ATTR="balanced-cashback-price";setInterval(initListClean,100);function initListClean(){const productCardListHeader=getFirstElement(PRODUCT_CARD_LIST_HEADER);if(productCardListHeader){appendFilterControlsIfNeeded(productCardListHeader,appendFiltersContainer);cleanList()}}function appendFiltersContainer(filtersContainer,parentNode){filtersContainer.style="display: flex;"+"grid-gap: 15px;"+"padding: 14px 5px;";const controlStyle="display: flex;"+"align-items: center;"+"font-size: 14px;";const inputStyle="border: 1px solid #e4ebf0;"+"font-size: 14px;"+"border-radius: 8px;"+"margin-left: 7px;";const numberInputStyle=inputStyle+// eslint-disable-line prefer-template
"padding: 8px 14px;";const checkboxInputStyle=inputStyle+// eslint-disable-line prefer-template
"width: 23px;"+"height: 23px;";const minCashbackDiv=createMinCashbackFilterControl(minCashbackFilter,controlStyle,numberInputStyle);const maxPriceDiv=createMaxPriceFilterControl(maxPriceFilter,controlStyle,numberInputStyle);const filterEnabledDiv=createEnabledFilterControl(filterEnabled,controlStyle,checkboxInputStyle);filtersContainer.append(minCashbackDiv,maxPriceDiv,filterEnabledDiv);parentNode.append(filtersContainer)}function cleanList(){const productCards=getAllElements(PRODUCT_CARD_SELECTOR);productCards.forEach((productCard=>{if(!filterEnabled.value){showElement(productCard,"flex");return}const productCardCashback=getFirstElement(PRODUCT_CARD_CASHBACK_SELECTOR,productCard);if(!productCardCashback){hideElement(productCard);return}const productCardCashbackNumber=getElementInnerNumber(productCardCashback,true);const productCardPrice=addBalancedCashbackPriceIfNeeded(productCard,productCardCashbackNumber);
// const price =
//     +productCardPrice.getAttribute(PRICE_ATTR);
const balancedCashbackPrice=+productCardPrice.getAttribute(BALANCED_CASHBACK_PRICE_ATTR);const conditionToHide=isLessThanFilter(productCardCashbackNumber,minCashbackFilter)||isGreaterThanFilter(balancedCashbackPrice,maxPriceFilter);showHideElement(productCard,conditionToHide,"flex")}))}function addBalancedCashbackPriceIfNeeded(productCard,productCardCashbackNumber){const productCardPrice=getFirstElement(PRODUCT_CARD_PRICE_SELECTOR,productCard);productCardPrice.hasAttribute(BALANCED_CASHBACK_PRICE_ATTR)||addBalancedCashbackPrice(productCardPrice,productCardCashbackNumber);return productCardPrice}function addBalancedCashbackPrice(productCardPrice,productCardCashbackNumber){const productCardPriceNumber=getElementInnerNumber(productCardPrice,true);const balancedCashbackPrice=getBalancedCashbackPrice(productCardPriceNumber,productCardCashbackNumber);const productCardPriceSpan=getFirstElement(":scope > span",productCardPrice);const newProductCardPriceSpanText=`${productCardPriceNumber.toLocaleString()} (${balancedCashbackPrice.toLocaleString()}) ₽`;productCardPriceSpan.innerText=newProductCardPriceSpanText;productCardPrice.setAttribute(PRICE_ATTR,productCardPriceNumber);productCardPrice.setAttribute(BALANCED_CASHBACK_PRICE_ATTR,balancedCashbackPrice)}function getBalancedCashbackPrice(price,cashback){const balancedCashbackUsage=getBalancedCashbackUsage(price,cashback);return price-balancedCashbackUsage}function getBalancedCashbackUsage(price,cashback){const cashbackCoeff=cashback/100;return(price*cashbackCoeff/(1+cashbackCoeff)).toFixed(0)}})();