// ==UserScript==
// @name         WB List Clean
// @description  Remove product cards by filter
// @grant        GM_addValueChangeListener
// @grant        GM_setValue
// @grant        GM_getValue
// @match        https://www.wildberries.ru/*
// @namespace    https://github.com/reliable-code/product-list-filters
// @version      0.7.73186903
// @icon         https://www.google.com/s2/favicons?sz=64&domain=wildberries.ru
// @author       reliable-code
// ==/UserScript==

(()=>{"use strict";


function utils_waitForElement(parentNode,selector,timeout=null){return new Promise((resolve=>{const existingElement=parentNode.querySelector(selector);if(existingElement){resolve(existingElement);return}const observer=new MutationObserver(mutationCallback);observer.observe(parentNode,{childList:true,subtree:true});let timeoutId=null;timeout&&(timeoutId=setTimeout((()=>{observer.disconnect();console.log(`No element found for selector: ${selector}`);resolve(null)}),timeout));function mutationCallback(){if(parentNode.querySelector(selector)){timeoutId&&clearTimeout(timeoutId);observer.disconnect();resolve(parentNode.querySelector(selector))}}}))}function debounce(func,wait=250){let timeoutId;return(...args)=>{clearTimeout(timeoutId);timeoutId=setTimeout((()=>func(...args)),wait)}}


function createTextInput(inputOnChange,inputStyle,inputValue){const input=createInput("text",inputOnChange,inputStyle);input.value=inputValue;return input}function createNumberInput(inputOnChange,inputStyle,inputValue,inputStep,inputMinValue,inputMaxValue){const input=createInput("number",inputOnChange,inputStyle);input.value=inputValue;input.step=inputStep;input.min=inputMinValue;input.max=inputMaxValue;return input}function createCheckboxInput(inputOnChange,inputStyle,isChecked){const input=createInput("checkbox",inputOnChange,inputStyle);input.checked=isChecked;return input}function createInput(type=null,inputOnChange=null,style=null){const input=document.createElement("input");type&&(input.type=type);if(inputOnChange){input.addEventListener("keyup",debounce(inputOnChange,200));input.addEventListener("change",debounce(inputOnChange,100))}style&&(input.style=style);return input}function createDiv(textContent=null,style=null){const div=document.createElement("div");textContent&&(div.textContent=textContent);style&&(div.style=style);return div}function createSpan(textContent=null,style=null){const span=document.createElement("span");textContent&&(span.textContent=textContent);style&&(span.style=style);return span}
// todo: move to common history functions
function appendStoredPriceValue(label,storedPrice,color,priceContainer){const divText=`${label}: `;const divStyle="color: #000;"+"font-size: 16px;"+"padding: 17px 0px 7px;";const storedPriceContainer=createDiv(divText,divStyle);const spanText=`${storedPrice.value.toLocaleString()} ₽`;const spanStyle="font-weight: bold;"+"padding: 6px 12px;"+"border-radius: 8px;"+"cursor: pointer;"+`background: ${color};`;const storedPriceSpan=createSpan(spanText,spanStyle);storedPriceSpan.addEventListener("mouseover",(()=>{storedPriceSpan.textContent=storedPrice.date}));storedPriceSpan.addEventListener("mouseleave",(()=>{storedPriceSpan.textContent=spanText}));storedPriceContainer.append(storedPriceSpan);priceContainer.parentNode.append(storedPriceContainer)}function removeNonNumber(stringValue){return stringValue.replace(/[^\d.,-]/g,"")}


function helpers_getFirstElement(selector,parentNode=document,logNotFound=false){const element=parentNode.querySelector(selector);logNotFound&&!element&&console.log(`No element found for selector: ${selector}`);return element}function getAllElements(selector,parentNode=document,logNotFound=false){const elements=parentNode.querySelectorAll(selector);logNotFound&&!elements.length&&console.log(`No elements found for selector: ${selector}`);return elements}function getFirstElementInnerNumber(parentNode,selector,cleanText=false,replaceComma=false){const element=helpers_getFirstElement(selector,parentNode,true);const elementNumber=getElementInnerNumber(element,cleanText,replaceComma);return elementNumber}function getElementInnerNumber(element,cleanText=false,replaceComma=false,defaultValue=null){if(!element){if(defaultValue!==null)return defaultValue;console.log("No element found")}const elementText=element.innerText;return parseNumber(elementText,cleanText,replaceComma)}function parseNumber(text,cleanText,replaceComma){cleanText&&(text=removeNonNumber(text));replaceComma&&(text=text.replace(",","."));const number=+text;return number}


function appendFilterControlsIfNeeded(parentNode,appendFiltersContainerFunc,force=false,filtersContainerId="customFiltersContainer"){let filtersContainer=helpers_getFirstElement(`#${filtersContainerId}`,parentNode);if(filtersContainer){if(!force)return;filtersContainer.remove()}filtersContainer=createDiv();filtersContainer.id=filtersContainerId;appendFiltersContainerFunc(filtersContainer,parentNode)}


class InputValueBase{constructor(value,onChange){this.value=value;this.onChange=onChange}onChangeIfDefined=()=>{this.onChange&&this.onChange()}}


function getInputValueFromEvent(event){const{target}=event;const{type}=target;switch(type){case"text":return`"${target.value}"`;case"number":return target.value;case"checkbox":return target.checked;default:console.log(`Unknown input type: ${type}`);return null}}


function parseValue(value){return value===""?null:JSON.parse(value)}


const setStorageValue=window.GM_setValue;const getStorageValue=window.GM_getValue;window.GM_addValueChangeListener;class StoredInputValue extends InputValueBase{constructor(storageKey,defaultValue=null,onChange=null){super(getStorageValue(storageKey,defaultValue),onChange);this.storageKey=storageKey}updateValueFromEvent=event=>{const newValue=getInputValueFromEvent(event);const newParsedValue=parseValue(newValue);if(this.value===newParsedValue)return;setStorageValue(this.storageKey,newParsedValue);this.value=newParsedValue;this.onChangeIfDefined()}}


/* eslint-disable no-bitwise */
// FNV-1a hash function (32-bit version)
function fnv1aHash32(input){const FNV_OFFSET_BASIS=2166136261;// Initial FNV-1a hash value (32-bit)
const FNV_PRIME=16777619;// The prime multiplier for the hash function
let hash=FNV_OFFSET_BASIS;for(let i=0;i<input.length;i+=1){const charCode=input.charCodeAt(i);// Get the character code
hash^=charCode;// XOR the hash with the character code
hash=Math.imul(hash,FNV_PRIME)}
// Constrain hash to 32 bits, convert to hex, and ensure it has 8 characters
return(hash>>>0).toString(16).padStart(8,"0")}


function getURLPathElement(position,defaultValue="common",logResult=false){const{pathname}=window.location;return getPathnameElement(pathname,position,defaultValue,logResult)}function getPathnameElement(pathname,position,defaultValue,logResult=false){const pathElements=pathname.split("/");const pathElement=pathElements[position]||defaultValue;logResult&&console.log(`Pathname element: ${pathElement}`);return pathElement}function getURLPathElementEnding(position,defaultValue="common",logResult=false){const pathElement=getURLPathElement(position,"",logResult);return getPathElementEnding(pathElement,defaultValue,logResult)}function getPathElementEnding(pathElement,defaultValue,logResult){if(!pathElement)return defaultValue;const pathElementEnding=pathElement.split("-").at(-1);logResult&&console.log(`Pathname element ending: ${pathElementEnding}`);return pathElementEnding}function pathnameIncludes(searchString){return window.location.pathname.includes(searchString)}function somePathElementEquals(searchString){const pathElements=window.location.pathname.split("/");return pathElements.some((pathElement=>pathElement===searchString))}


function isNotMatchTextFilter(parameterValue,filter){return!isMatchTextFilter(parameterValue,filter)}function isMatchTextFilter(parameterValue,filter){if(!filter.value)return true;const comparedString=parameterValue.toLowerCase();const searchStrings=filter.value.toLowerCase().split(",").map((searchString=>searchString.trim()));const{include:includeSearchStrings,notInclude:notIncludeSearchStrings}=searchStrings.reduce(((result,searchString)=>{if(searchString.startsWith("!")){const notIncludeSearchString=searchString.substring(1);notIncludeSearchString.length&&result.notInclude.push(notIncludeSearchString)}else result.include.push(searchString);return result}),{include:[],notInclude:[]});return includeSearchStrings.every((searchString=>comparedString.includes(searchString)))&&notIncludeSearchStrings.every((searchString=>!comparedString.includes(searchString)))}function isLessThanFilter(parameterValue,filter){return filter.value&&parameterValue<filter.value}function isGreaterThanFilter(parameterValue,filter){return filter.value&&parameterValue>filter.value}


function createFilterControlText(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDiv(titleText,controlStyle);const input=createTextInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createFilterControlNumber(titleText,inputValue,inputStep,inputMinValue,inputMaxValue,controlStyle=null,inputStyle=null){const filterControl=createDiv(titleText,controlStyle);const input=createNumberInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value,inputStep,inputMinValue,inputMaxValue);filterControl.append(input);return filterControl}function createFilterControlCheckbox(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDiv(titleText,controlStyle);const input=createCheckboxInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createNameFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlText("Содержит: ",inputValue,controlStyle,inputStyle)}function createMinRatingFilterControl(inputValue,controlStyle=null,inputStyle=null,inputStep=.1){return createFilterControlNumber("Мин. рейтинг: ",inputValue,inputStep,3,5,controlStyle,inputStyle)}function createMinReviewsFilterControl(inputValue,controlStyle=null,inputStyle=null){return createReviewsFilterControl("Мин. отзывов: ",inputValue,controlStyle,inputStyle)}function createMaxReviewsFilterControl(inputValue,controlStyle=null,inputStyle=null){return createReviewsFilterControl("Макс. отзывов: ",inputValue,controlStyle,inputStyle)}function createReviewsFilterControl(titleText,inputValue,controlStyle=null,inputStyle=null){return createFilterControlNumber(titleText,inputValue,"1","1","999999",controlStyle,inputStyle)}function createEnabledFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlCheckbox("Вкл: ",inputValue,controlStyle,inputStyle)}function hideElement(element){setElementDisplayAttributeIfNeeded(element);setElementDisplay(element,"none")}function showElement(element,display){display=display||getElementDisplay(element);setElementDisplay(element,display)}function showHideElement(element,conditionToHide,display){if(conditionToHide)hideElement(element);else{display=display||getElementDisplay(element);showElement(element,display)}}function setElementDisplay(element,display){element.style.display=display}function getElementDisplay(element){setElementDisplayAttributeIfNeeded(element);return element.getAttribute("display")}function setElementDisplayAttributeIfNeeded(element){if(element.hasAttribute("display"))return;const{display}=getComputedStyle(element);element.setAttribute("display",display)}


function getCurrentDate(){return(new Date).toLocaleDateString()}


class ProductData{constructor(lastCheckDate=getCurrentDate(),lowestPrice=null,highestPrice=null){this.lastCheckDate=lastCheckDate;this.lowestPrice=lowestPrice;this.highestPrice=highestPrice}get lowestPriceValue(){return this.lowestPrice?this.lowestPrice.value:0}get highestPriceValue(){return this.highestPrice?this.highestPrice.value:0}updateLastCheckDate=()=>{this.lastCheckDate=getCurrentDate()};static fromObject(obj){const{lastCheckDate,lowestPrice,highestPrice}=obj;return new ProductData(lastCheckDate,lowestPrice,highestPrice)}}


class DatedValue{constructor(value,date=getCurrentDate()){this.value=value;this.date=date}}


class PriceData{constructor(current,lowest,highest){this.current=current;this.lowest=lowest;this.highest=highest}}


const PRODUCT_CARD_NAME_SELECTOR=".favorites-card__brand-wrap";const INPUT_STYLE="margin-left: 4px;";const NUMBER_INPUT_STYLE=INPUT_STYLE+// eslint-disable-line prefer-template
"width: 60px;";const TEXT_INPUT_STYLE=INPUT_STYLE+// eslint-disable-line prefer-template
"width: 180px;";const CONTROL_STYLE="display: flex;"+"align-items: center;";const CHECKBOX_INPUT_STYLE="margin-left: 5px;"+"width: 25px;"+"height: 25px;";function setCommonFiltersContainerStyles(filtersContainer){filtersContainer.style="display: flex;"+"grid-gap: 15px;"+"margin-top: 14px;"}function getProductArticleFromLink(productCardLink){const productCardLinkHref=productCardLink.getAttribute("href");return getPathnameElement(productCardLinkHref,4,"")}function appendPriceHistory(priceContainer,priceSpan,productArticle){const currentPriceValue=getElementInnerNumber(priceSpan,true);const productStorageKey=`product-${productArticle}`;const storedProduct=getStorageValue(productStorageKey);let currentProduct=storedProduct?ProductData.fromObject(storedProduct):new ProductData;const lowestPriceKey="lowestPrice";const highestPriceKey="highestPrice";currentProduct=updateAndAppendStoredPriceValue(currentProduct,lowestPriceKey,(storedPrice=>currentPriceValue<=storedPrice.value),currentPriceValue,"Мин. цена","#d6f5b1",priceContainer);currentProduct=updateAndAppendStoredPriceValue(currentProduct,highestPriceKey,(storedPrice=>currentPriceValue>=storedPrice.value),currentPriceValue,"Макс. цена","#fed2ea",priceContainer);currentProduct.updateLastCheckDate();setStorageValue(productStorageKey,currentProduct);const{lowestPriceValue,highestPriceValue}=currentProduct;return new PriceData(currentPriceValue,lowestPriceValue,highestPriceValue)}function updateAndAppendStoredPriceValue(product,priceKey,compareCondition,currentPriceValue,label,color,priceContainer){let storedPrice=product[priceKey];if(currentPriceValue){if(!storedPrice||compareCondition(storedPrice)){const currentPrice=new DatedValue(currentPriceValue);product[priceKey]=currentPrice;storedPrice=currentPrice}}else if(!storedPrice)return product;appendStoredPriceValue(label,storedPrice,color,priceContainer);return product}


const FILTERS_BLOCK_WRAP_SELECTOR=".filters-block__wrap";const PRODUCT_CARD_LIST_SELECTOR=".product-card-list";const PRODUCT_CARD_SELECTOR=".product-card";const productList_PRODUCT_CARD_NAME_SELECTOR=".product-card__brand-wrap";const PRODUCT_CARD_REVIEWS_SELECTOR=".product-card__count";const PRODUCT_CARD_RATING_SELECTOR=".address-rate-mini";const PRODUCT_CARD_PRICE_SELECTOR=".price__lower-price";const PRICE_FILTER_URL_PARAMS_NAME="priceU";const CATEGORY_NAME=getCategoryName();const nameFilter=new StoredInputValue(`${CATEGORY_NAME}-name-filter`,null,cleanList);const minReviewsFilter=new StoredInputValue(`${CATEGORY_NAME}-min-reviews-filter`,null,cleanList);const maxReviewsFilter=new StoredInputValue(`${CATEGORY_NAME}-max-reviews-filter`,null,cleanList);const minRatingFilter=new StoredInputValue(`${CATEGORY_NAME}-min-rating-filter`,4.8,cleanList);const filterEnabled=new StoredInputValue(`${CATEGORY_NAME}-filter-enabled`,true,cleanList);let minPriceValue=getMinPriceValueFromURL();const minPriceDivTextContent=()=>`Минимальная цена: ${minPriceValue}`;function getCategoryName(){const categoryNamePosition=somePathElementEquals("brands")?2:3;const categoryNameElement=getURLPathElement(categoryNamePosition);let categoryName;categoryName=categoryNameElement&&categoryNameElement!=="search.aspx"?fnv1aHash32(categoryNameElement):"common";return categoryName}function getMinPriceValueFromURL(){const params=new URLSearchParams(window.location.search);if(!params.has(PRICE_FILTER_URL_PARAMS_NAME))return 0;const priceFilterParams=params.get(PRICE_FILTER_URL_PARAMS_NAME);const priceFilterParamsArray=priceFilterParams.split(";");const minPriceFilterParam=priceFilterParamsArray[0];const minPriceFilterValue=minPriceFilterParam/100;return minPriceFilterValue}function initProductListMods(){utils_waitForElement(document,FILTERS_BLOCK_WRAP_SELECTOR).then((filtersBlockWrap=>{removeRecentItemsBlock();appendFilterControlsIfNeeded(filtersBlockWrap,appendFiltersContainer);cleanList();const productCardList=helpers_getFirstElement(PRODUCT_CARD_LIST_SELECTOR);const observer=new MutationObserver(debounce(cleanList,150));observer.observe(productCardList,{childList:true})}))}function removeRecentItemsBlock(){const recentItems=helpers_getFirstElement(".j-recent-items");if(recentItems){const{parentNode}=recentItems;parentNode.remove()}}function appendFiltersContainer(filtersContainer,parentNode){setCommonFiltersContainerStyles(filtersContainer);const priceControlStyle=CONTROL_STYLE+// eslint-disable-line prefer-template
"margin-right: 37px;";const nameFilterDiv=createNameFilterControl(nameFilter,CONTROL_STYLE,TEXT_INPUT_STYLE);const minReviewsDiv=createMinReviewsFilterControl(minReviewsFilter,CONTROL_STYLE,NUMBER_INPUT_STYLE);const maxReviewsDiv=createMaxReviewsFilterControl(maxReviewsFilter,CONTROL_STYLE,NUMBER_INPUT_STYLE);const minRatingDiv=createMinRatingFilterControl(minRatingFilter,CONTROL_STYLE,NUMBER_INPUT_STYLE);const minPriceDiv=createDiv(minPriceDivTextContent(),priceControlStyle);const filterEnabledDiv=createEnabledFilterControl(filterEnabled,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);setInterval((()=>checkMinPrice(minPriceDiv)),500);filtersContainer.append(nameFilterDiv,minReviewsDiv,maxReviewsDiv,minRatingDiv,minPriceDiv,filterEnabledDiv);parentNode.append(filtersContainer)}function checkMinPrice(minPriceDiv){const currentMinPriceValue=getMinPriceValueFromURL();if(minPriceValue!==currentMinPriceValue){minPriceValue=currentMinPriceValue;minPriceDiv.textContent=minPriceDivTextContent()}}function cleanList(){const productCards=getAllElements(PRODUCT_CARD_SELECTOR);productCards.forEach((productCard=>{if(!filterEnabled.value){showElement(productCard);return}const productCardNameWrap=helpers_getFirstElement(productList_PRODUCT_CARD_NAME_SELECTOR,productCard);const productCardName=productCardNameWrap.innerText;productCardNameWrap.title=productCardName;productCardNameWrap.style.whiteSpace="normal";const productCardReviewsNumber=getFirstElementInnerNumber(productCard,PRODUCT_CARD_REVIEWS_SELECTOR,true);const productCardRatingNumber=getFirstElementInnerNumber(productCard,PRODUCT_CARD_RATING_SELECTOR,true,true);const productCardPriceNumber=getFirstElementInnerNumber(productCard,PRODUCT_CARD_PRICE_SELECTOR,true);const conditionToHide=isNotMatchTextFilter(productCardName,nameFilter)||isLessThanFilter(productCardReviewsNumber,minReviewsFilter)||isGreaterThanFilter(productCardReviewsNumber,maxReviewsFilter)||isLessThanFilter(productCardRatingNumber,minRatingFilter)||productCardPriceNumber<minPriceValue;showHideElement(productCard,conditionToHide)}))}


const SIDE_CONTAINER_SELECTOR=".product-page__aside-container";const PRICE_CONTAINER_SELECTOR=".price-block__content";const PRICE_SELECTOR=".price-block__wallet-price";function initProductPageMods(){initAppendPriceHistory()}function initAppendPriceHistory(){utils_waitForElement(document,`${SIDE_CONTAINER_SELECTOR}`).then((sideContainer=>{if(!sideContainer)return;const productArticle=getProductArticleFromPathname();const priceContainer=helpers_getFirstElement(PRICE_CONTAINER_SELECTOR,sideContainer);const priceSpan=helpers_getFirstElement(PRICE_SELECTOR,priceContainer);appendPriceHistory(priceContainer,priceSpan,productArticle)}))}function getProductArticleFromPathname(){return getURLPathElementEnding(2,"unknown")}


const APPEND_STORED_PRICE_VALUES_PASSED_ATTR="appendStoredPriceValuesPassed";const CURRENT_PRICE_ATTR="currentPrice";const LOWEST_PRICE_ATTR="lowestPrice";const GOOD_PRICE_ATTR="goodPrice";


function checkIfGoodPrice(priceContainerWrap,productCard,priceTolerancePercentValue){const currentPrice=productCard.getAttribute(CURRENT_PRICE_ATTR);const lowestPrice=productCard.getAttribute(LOWEST_PRICE_ATTR);const priceToleranceFactor=1+priceTolerancePercentValue/100;const goodPrice=lowestPrice*priceToleranceFactor;if(currentPrice<=goodPrice){priceContainerWrap.style.border="3px solid rgb(214, 245, 177)";priceContainerWrap.style.borderRadius="14px";priceContainerWrap.style.padding="4px 10px 6px";priceContainerWrap.style.marginBottom="5px";priceContainerWrap.style.width="-webkit-fill-available";productCard.setAttribute(GOOD_PRICE_ATTR,"")}else{const stylePropertiesToRemove=["border","borderRadius","padding","marginBottom","width"];stylePropertiesToRemove.forEach((property=>priceContainerWrap.style.removeProperty(property)));productCard.removeAttribute(GOOD_PRICE_ATTR)}}


const FILTER_CONTAINER_SELECTOR=".favorites-goods__head";const PRODUCT_LIST_SELECTOR=".favorites-goods__list";const PRODUCT_CARDS_SELECTOR=".goods-card";const favorites_PRICE_SELECTOR=".wallet-price";const favorites_nameFilter=new StoredInputValue("favorites-name-filter",null,processList);const bestPriceFilter=new StoredInputValue("best-price-filter",false,processList);const onPriceTolerancePercentChange=()=>processList(true);const priceTolerancePercent=new StoredInputValue("price-tolerance-percent",3,onPriceTolerancePercentChange);const favorites_filterEnabled=new StoredInputValue("favorites-filter-enabled",true,processList);function initFavoritesMods(){utils_waitForElement(document,FILTER_CONTAINER_SELECTOR).then((filterContainer=>{appendFilterControlsIfNeeded(filterContainer,favorites_appendFiltersContainer);const productList=helpers_getFirstElement(PRODUCT_LIST_SELECTOR);processList();const observer=new MutationObserver(debounce(processList));observer.observe(productList,{childList:true,subtree:true})}))}function favorites_appendFiltersContainer(filtersContainer,parentNode){setCommonFiltersContainerStyles(filtersContainer);const nameFilterDiv=createNameFilterControl(favorites_nameFilter,CONTROL_STYLE,TEXT_INPUT_STYLE);const bestPriceDiv=createFilterControlCheckbox("Лучшая цена: ",bestPriceFilter,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);const priceTolerancePercentDiv=createFilterControlNumber("Допуск цены, %: ",priceTolerancePercent,1,0,100,CONTROL_STYLE,NUMBER_INPUT_STYLE);const filterEnabledDiv=createEnabledFilterControl(favorites_filterEnabled,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);filtersContainer.append(nameFilterDiv,bestPriceDiv,priceTolerancePercentDiv,filterEnabledDiv);parentNode.append(filtersContainer)}function processList(priceTolerancePercentChanged=false){const productCards=getAllElements(PRODUCT_CARDS_SELECTOR);productCards.forEach((productCard=>{if(!favorites_filterEnabled.value){showElement(productCard);return}const priceContainer=helpers_getFirstElement(".goods-card__price",productCard);appendStoredPriceValuesIfNeeded(productCard,priceContainer);if(priceTolerancePercentChanged&&productCard.hasAttribute(CURRENT_PRICE_ATTR)&&productCard.hasAttribute(LOWEST_PRICE_ATTR)){const priceContainerWrap=priceContainer.parentNode;checkIfGoodPrice(priceContainerWrap,productCard,priceTolerancePercent.value)}const productCardNameWrap=helpers_getFirstElement(PRODUCT_CARD_NAME_SELECTOR,productCard);if(!productCardNameWrap){hideElement(productCard);return}const productCardName=productCardNameWrap.innerText;productCardNameWrap.title=productCardName;const isNotMatchBestPriceFilter=!!bestPriceFilter.value&&!productCard.hasAttribute(GOOD_PRICE_ATTR);const conditionToHide=isNotMatchTextFilter(productCardName,favorites_nameFilter)||isNotMatchBestPriceFilter;showHideElement(productCard,conditionToHide)}))}function appendStoredPriceValuesIfNeeded(productCard,priceContainer){if(productCard.hasAttribute(APPEND_STORED_PRICE_VALUES_PASSED_ATTR))return;const outOfStock=helpers_getFirstElement(".goods-card__out-stock",productCard);if(outOfStock){productCard.setAttribute(APPEND_STORED_PRICE_VALUES_PASSED_ATTR,"");return}const priceContainerWrap=priceContainer.parentNode;appendStoredPriceValues(priceContainer,productCard,priceContainerWrap);checkIfGoodPrice(priceContainerWrap,productCard,priceTolerancePercent.value)}function appendStoredPriceValues(priceContainer,productCard,priceContainerWrap){const priceSpan=helpers_getFirstElement(favorites_PRICE_SELECTOR,productCard);const productCardLink=helpers_getFirstElement("a",productCard);if(!priceSpan||!productCardLink)return;const productArticle=getProductArticleFromLink(productCardLink);const priceData=appendPriceHistory(priceContainer,priceSpan,productArticle);productCard.setAttribute(CURRENT_PRICE_ATTR,priceData.current);productCard.setAttribute(LOWEST_PRICE_ATTR,priceData.lowest);helpers_getFirstElement(".goods-card__similar",priceContainerWrap).remove();priceContainerWrap.style.display="block";productCard.setAttribute(APPEND_STORED_PRICE_VALUES_PASSED_ATTR,"")}


somePathElementEquals("catalog")||somePathElementEquals("brands")?pathnameIncludes("detail")?initProductPageMods():initProductListMods():somePathElementEquals("favorites")&&initFavoritesMods()})();