// ==UserScript==
// @name         WB List Clean
// @description  Remove product cards by filter
// @grant        GM_listValues
// @grant        GM_addValueChangeListener
// @grant        GM_setValue
// @grant        GM_getValue
// @match        https://www.wildberries.ru/*
// @namespace    https://github.com/reliable-code/product-list-filters
// @version      0.7.73237080
// @icon         https://www.google.com/s2/favicons?sz=64&domain=wildberries.ru
// @author       reliable-code
// ==/UserScript==

(()=>{"use strict";


function utils_waitForElement(parentNode,selector,timeout=null){return new Promise((resolve=>{const existingElement=parentNode.querySelector(selector);if(existingElement){resolve(existingElement);return}const observer=new MutationObserver(mutationCallback);observer.observe(parentNode,{childList:true,subtree:true});let timeoutId=null;timeout&&(timeoutId=setTimeout((()=>{observer.disconnect();console.log(`No element found for selector: ${selector}`);resolve(null)}),timeout));function mutationCallback(){if(parentNode.querySelector(selector)){timeoutId&&clearTimeout(timeoutId);observer.disconnect();resolve(parentNode.querySelector(selector))}}}))}function debounce(func,wait=250){let timeoutId;return(...args)=>{clearTimeout(timeoutId);timeoutId=setTimeout((()=>func(...args)),wait)}}function removeNonNumber(stringValue){return stringValue.replace(/[^\d.,-]/g,"")}function capitalize(stringValue){return stringValue.charAt(0).toUpperCase()+stringValue.slice(1)}


function helpers_getFirstElement(selector,parentNode=document,logNotFound=false){const element=parentNode.querySelector(selector);logNotFound&&!element&&console.log(`No element found for selector: ${selector}`);return element}function getAllElements(selector,parentNode=document,logNotFound=false){const elements=parentNode.querySelectorAll(selector);logNotFound&&!elements.length&&console.log(`No elements found for selector: ${selector}`);return elements}function getFirstElementInnerNumber(parentNode,selector,cleanText=false,replaceComma=false){const element=helpers_getFirstElement(selector,parentNode,true);const elementNumber=getElementInnerNumber(element,cleanText,replaceComma);return elementNumber}function getElementInnerNumber(element,cleanText=false,replaceComma=false,defaultValue=null){if(!element){if(defaultValue!==null)return defaultValue;console.log("No element found")}const elementText=element.innerText;return parseNumber(elementText,cleanText,replaceComma)}function parseNumber(text,cleanText,replaceComma){cleanText&&(text=removeNonNumber(text));replaceComma&&(text=text.replace(",","."));const number=+text;return number}function applyStyles(element,styles){Object.entries(styles).forEach((([key,value])=>{element.style[key]=value}))}


function createTextInput(inputOnChange,inputStyle,inputValue){const input=createInput("text",inputOnChange,inputStyle);input.value=inputValue;return input}function createNumberInput(inputOnChange,inputStyle,inputValue,inputStep,inputMinValue,inputMaxValue){const input=createInput("number",inputOnChange,inputStyle);input.value=inputValue;input.step=inputStep;input.min=inputMinValue;input.max=inputMaxValue;return input}function createCheckboxInput(inputOnChange,inputStyle,isChecked){const input=createInput("checkbox",inputOnChange,inputStyle);input.checked=isChecked;return input}function createInput(type=null,inputOnChange=null,style=null){const input=document.createElement("input");type&&(input.type=type);if(inputOnChange){input.addEventListener("keyup",debounce(inputOnChange,200));input.addEventListener("change",debounce(inputOnChange,100))}style&&(input.style=style);return input}function createSpan(styles={},innerHTML=null){return createElement("span",styles,innerHTML)}function createButton(styles={},innerHTML=null,onClick=null){const button=createElement("button",styles,innerHTML);onClick&&(button.onclick=onClick);return button}
// todo: replace usages with createDiv()
function createDivObsolete(textContent=null,style=null){const div=document.createElement("div");textContent&&(div.textContent=textContent);style&&(div.style=style);return div}function createDiv(styles={},innerHTML=null){return createElement("div",styles,innerHTML)}function createElement(tagName,styles,innerHTML=null){const element=document.createElement(tagName);Object.keys(styles).length>0&&applyStyles(element,styles);innerHTML&&(element.innerHTML=innerHTML);return element}


function appendFilterControlsIfNeeded(parentNode,appendFiltersContainerFunc,force=false,filtersContainerId="customFiltersContainer"){let filtersContainer=helpers_getFirstElement(`#${filtersContainerId}`,parentNode);if(filtersContainer){if(!force)return;filtersContainer.remove()}filtersContainer=createDiv();filtersContainer.id=filtersContainerId;appendFiltersContainerFunc(filtersContainer,parentNode)}


class InputValueBase{constructor(value,onChange){this.value=value;this.onChange=onChange}onChangeIfDefined=()=>{this.onChange&&this.onChange()}}


function getInputValueFromEvent(event){const{target}=event;const{type}=target;switch(type){case"text":return`"${target.value}"`;case"number":return target.value;case"checkbox":return target.checked;default:console.log(`Unknown input type: ${type}`);return null}}


function parseValue(value){return value===""?null:JSON.parse(value)}


const setStorageValue=window.GM_setValue;const setStorageValueAsync=window.GM.setValue;const getStorageValue=window.GM_getValue;window.GM_addValueChangeListener;class StoredInputValue extends InputValueBase{constructor(storageKey,defaultValue=null,onChange=null){super(getStorageValue(storageKey,defaultValue),onChange);this.storageKey=storageKey}updateValueFromEvent=event=>{const newValue=getInputValueFromEvent(event);const newParsedValue=parseValue(newValue);if(this.value===newParsedValue)return;setStorageValue(this.storageKey,newParsedValue);this.value=newParsedValue;this.onChangeIfDefined()}}


/* eslint-disable no-bitwise */
// FNV-1a hash function (32-bit version)
function fnv1aHash32(input){const FNV_OFFSET_BASIS=2166136261;// Initial FNV-1a hash value (32-bit)
const FNV_PRIME=16777619;// The prime multiplier for the hash function
let hash=FNV_OFFSET_BASIS;for(let i=0;i<input.length;i+=1){const charCode=input.charCodeAt(i);// Get the character code
hash^=charCode;// XOR the hash with the character code
hash=Math.imul(hash,FNV_PRIME)}
// Constrain hash to 32 bits, convert to hex, and ensure it has 8 characters
return(hash>>>0).toString(16).padStart(8,"0")}


function getURLPathElement(position,defaultValue="common",logResult=false){const{pathname}=window.location;return getPathnameElement(pathname,position,defaultValue,logResult)}function getPathnameElement(pathname,position,defaultValue,logResult=false){const pathElements=pathname.split("/");const pathElement=pathElements[position]||defaultValue;logResult&&console.log(`Pathname element: ${pathElement}`);return pathElement}function getURLPathElementEnding(position,defaultValue="common",logResult=false){const pathElement=getURLPathElement(position,"",logResult);return getPathElementEnding(pathElement,defaultValue,logResult)}function getPathElementEnding(pathElement,defaultValue,logResult){if(!pathElement)return defaultValue;const pathElementEnding=pathElement.split("-").at(-1);logResult&&console.log(`Pathname element ending: ${pathElementEnding}`);return pathElementEnding}function pathnameIncludes(searchString){return window.location.pathname.includes(searchString)}function somePathElementEquals(searchString){const pathElements=window.location.pathname.split("/");return pathElements.some((pathElement=>pathElement===searchString))}


function isNotMatchTextFilter(parameterValue,filter){return!isMatchTextFilter(parameterValue,filter)}function isMatchTextFilter(parameterValue,filter){if(!filter.value)return true;const comparedString=parameterValue.toLowerCase();const searchStrings=filter.value.toLowerCase().split(",").map((searchString=>searchString.trim()));const{include:includeSearchStrings,notInclude:notIncludeSearchStrings}=searchStrings.reduce(((result,searchString)=>{if(searchString.startsWith("!")){const notIncludeSearchString=searchString.substring(1);notIncludeSearchString.length&&result.notInclude.push(notIncludeSearchString)}else result.include.push(searchString);return result}),{include:[],notInclude:[]});return includeSearchStrings.every((searchString=>comparedString.includes(searchString)))&&notIncludeSearchStrings.every((searchString=>!comparedString.includes(searchString)))}function isLessThanFilter(parameterValue,filter){return filter.value&&parameterValue<filter.value}function isGreaterThanFilter(parameterValue,filter){return filter.value&&parameterValue>filter.value}


function createFilterControlText(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDivObsolete(titleText,controlStyle);const input=createTextInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createFilterControlNumber(titleText,inputValue,inputStep,inputMinValue,inputMaxValue,controlStyle=null,inputStyle=null){const filterControl=createDivObsolete(titleText,controlStyle);const input=createNumberInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value,inputStep,inputMinValue,inputMaxValue);filterControl.append(input);return filterControl}function createFilterControlCheckbox(titleText,inputValue,controlStyle=null,inputStyle=null){const filterControl=createDivObsolete(titleText,controlStyle);const input=createCheckboxInput(inputValue.updateValueFromEvent,inputStyle,inputValue.value);filterControl.append(input);return filterControl}function createNameFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlText("Содержит: ",inputValue,controlStyle,inputStyle)}function createMinRatingFilterControl(inputValue,controlStyle=null,inputStyle=null,inputStep=.1){return createFilterControlNumber("Мин. рейтинг: ",inputValue,inputStep,3,5,controlStyle,inputStyle)}function createMinReviewsFilterControl(inputValue,controlStyle=null,inputStyle=null){return createReviewsFilterControl("Мин. отзывов: ",inputValue,controlStyle,inputStyle)}function createMaxReviewsFilterControl(inputValue,controlStyle=null,inputStyle=null){return createReviewsFilterControl("Макс. отзывов: ",inputValue,controlStyle,inputStyle)}function createReviewsFilterControl(titleText,inputValue,controlStyle=null,inputStyle=null){return createFilterControlNumber(titleText,inputValue,"1","1","999999",controlStyle,inputStyle)}function createEnabledFilterControl(inputValue,controlStyle=null,inputStyle=null){return createFilterControlCheckbox("Вкл: ",inputValue,controlStyle,inputStyle)}function hideElement(element){setElementDisplayAttributeIfNeeded(element);setElementDisplay(element,"none")}function showElement(element,display){display=display||getElementDisplay(element);setElementDisplay(element,display)}function showHideElement(element,conditionToHide,display){if(conditionToHide)hideElement(element);else{display=display||getElementDisplay(element);showElement(element,display)}}function setElementDisplay(element,display){element.style.display=display}function getElementDisplay(element){setElementDisplayAttributeIfNeeded(element);return element.getAttribute("display")}function setElementDisplayAttributeIfNeeded(element){if(element.hasAttribute("display"))return;const{display}=getComputedStyle(element);element.setAttribute("display",display)}


const PRODUCT_CARD_NAME_SELECTOR=".favorites-card__brand-wrap";const INPUT_STYLE="margin-left: 4px;";const NUMBER_INPUT_STYLE=INPUT_STYLE+// eslint-disable-line prefer-template
"width: 60px;";const TEXT_INPUT_STYLE=INPUT_STYLE+// eslint-disable-line prefer-template
"width: 180px;";const CONTROL_STYLE="display: flex;"+"align-items: center;";const CHECKBOX_INPUT_STYLE="margin-left: 5px;"+"width: 25px;"+"height: 25px;";function setCommonFiltersContainerStyles(filtersContainer){filtersContainer.style="display: flex;"+"grid-gap: 15px;"+"margin-top: 14px;"}function getProductArticleFromLink(productCardLink){const productCardLinkHref=productCardLink.getAttribute("href");return getPathnameElement(productCardLinkHref,4,"")}function getPriceSpan(priceContainer,selectors){return helpers_getFirstElement(selectors.WALLET_PRICE,priceContainer)||helpers_getFirstElement(selectors.PRICE,priceContainer)}


const FILTERS_BLOCK_WRAP_SELECTOR=".filters-block__wrap";const PRODUCT_CARD_LIST_SELECTOR=".product-card-list";const PRODUCT_CARD_SELECTOR=".product-card";const productList_PRODUCT_CARD_NAME_SELECTOR=".product-card__brand-wrap";const PRODUCT_CARD_REVIEWS_SELECTOR=".product-card__count";const PRODUCT_CARD_RATING_SELECTOR=".address-rate-mini";const PRODUCT_CARD_PRICE_SELECTOR=".price__lower-price";const PRICE_FILTER_URL_PARAMS_NAME="priceU";const CATEGORY_NAME=getCategoryName();const nameFilter=new StoredInputValue(`${CATEGORY_NAME}-name-filter`,null,cleanList);const minReviewsFilter=new StoredInputValue(`${CATEGORY_NAME}-min-reviews-filter`,null,cleanList);const maxReviewsFilter=new StoredInputValue(`${CATEGORY_NAME}-max-reviews-filter`,null,cleanList);const minRatingFilter=new StoredInputValue(`${CATEGORY_NAME}-min-rating-filter`,4.8,cleanList);const filterEnabled=new StoredInputValue(`${CATEGORY_NAME}-filter-enabled`,true,cleanList);let minPriceValue=getMinPriceValueFromURL();const minPriceDivContent=()=>`Минимальная цена: ${minPriceValue}`;function getCategoryName(){const categoryNamePosition=somePathElementEquals("brands")?2:3;const categoryNameElement=getURLPathElement(categoryNamePosition,"");let categoryName;categoryName=categoryNameElement&&categoryNameElement!=="search.aspx"?fnv1aHash32(categoryNameElement):"common";return categoryName}function getMinPriceValueFromURL(){const params=new URLSearchParams(window.location.search);if(!params.has(PRICE_FILTER_URL_PARAMS_NAME))return 0;const priceFilterParams=params.get(PRICE_FILTER_URL_PARAMS_NAME);const priceFilterParamsArray=priceFilterParams.split(";");const minPriceFilterParam=priceFilterParamsArray[0];const minPriceFilterValue=minPriceFilterParam/100;return minPriceFilterValue}function initProductListMods(){utils_waitForElement(document,FILTERS_BLOCK_WRAP_SELECTOR).then((filtersBlockWrap=>{removeRecentItemsBlock();appendFilterControlsIfNeeded(filtersBlockWrap,appendFiltersContainer);cleanList();const productCardList=helpers_getFirstElement(PRODUCT_CARD_LIST_SELECTOR);const observer=new MutationObserver(debounce(cleanList,150));observer.observe(productCardList,{childList:true})}))}function removeRecentItemsBlock(){const recentItems=helpers_getFirstElement(".j-recent-items");if(recentItems){const{parentNode}=recentItems;parentNode.remove()}}function appendFiltersContainer(filtersContainer,parentNode){setCommonFiltersContainerStyles(filtersContainer);const priceControlStyle=CONTROL_STYLE+// eslint-disable-line prefer-template
"margin-right: 37px;";const nameFilterDiv=createNameFilterControl(nameFilter,CONTROL_STYLE,TEXT_INPUT_STYLE);const minReviewsDiv=createMinReviewsFilterControl(minReviewsFilter,CONTROL_STYLE,NUMBER_INPUT_STYLE);const maxReviewsDiv=createMaxReviewsFilterControl(maxReviewsFilter,CONTROL_STYLE,NUMBER_INPUT_STYLE);const minRatingDiv=createMinRatingFilterControl(minRatingFilter,CONTROL_STYLE,NUMBER_INPUT_STYLE);const minPriceDiv=createDivObsolete(minPriceDivContent(),priceControlStyle);const filterEnabledDiv=createEnabledFilterControl(filterEnabled,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);setInterval((()=>checkMinPrice(minPriceDiv)),500);filtersContainer.append(nameFilterDiv,minReviewsDiv,maxReviewsDiv,minRatingDiv,minPriceDiv,filterEnabledDiv);parentNode.append(filtersContainer)}function checkMinPrice(minPriceDiv){const currentMinPriceValue=getMinPriceValueFromURL();if(minPriceValue!==currentMinPriceValue){minPriceValue=currentMinPriceValue;minPriceDiv.textContent=minPriceDivContent()}}function cleanList(){const productCards=getAllElements(PRODUCT_CARD_SELECTOR);productCards.forEach((productCard=>{if(!filterEnabled.value){showElement(productCard);return}const productCardNameWrap=helpers_getFirstElement(productList_PRODUCT_CARD_NAME_SELECTOR,productCard);const productCardName=productCardNameWrap.innerText;productCardNameWrap.title=productCardName;productCardNameWrap.style.whiteSpace="normal";const productCardReviewsNumber=getFirstElementInnerNumber(productCard,PRODUCT_CARD_REVIEWS_SELECTOR,true);const productCardRatingNumber=getFirstElementInnerNumber(productCard,PRODUCT_CARD_RATING_SELECTOR,true,true);const productCardPriceNumber=getFirstElementInnerNumber(productCard,PRODUCT_CARD_PRICE_SELECTOR,true);const conditionToHide=isNotMatchTextFilter(productCardName,nameFilter)||isLessThanFilter(productCardReviewsNumber,minReviewsFilter)||isGreaterThanFilter(productCardReviewsNumber,maxReviewsFilter)||isLessThanFilter(productCardRatingNumber,minRatingFilter)||productCardPriceNumber<minPriceValue;showHideElement(productCard,conditionToHide)}))}


const APPEND_PRICE_HISTORY_PASSED_ATTR="appendPriceHistoryPassed";const APPEND_STORED_PRICE_VALUES_PASSED_ATTR="appendStoredPriceValuesPassed";const CURRENT_PRICE_ATTR="currentPrice";const LOWEST_PRICE_ATTR="lowestPrice";const GOOD_PRICE_ATTR="goodPrice";


class ProductData{constructor(lastCheckDate=Date.now(),lowestPrice=null,highestPrice=null,priceHistory={}){this.lastCheckDate=lastCheckDate;this.lowestPrice=lowestPrice;this.highestPrice=highestPrice;this.priceHistory=priceHistory}get lowestPriceValue(){return this.lowestPrice?this.lowestPrice.value:0}get highestPriceValue(){return this.highestPrice?this.highestPrice.value:0}updateLastCheckDate=()=>{this.lastCheckDate=Date.now()};static fromObject(obj){const{lastCheckDate,lowestPrice,highestPrice,priceHistory}=obj;return new ProductData(lastCheckDate,lowestPrice,highestPrice,priceHistory)}}


class RatedProductData extends ProductData{constructor(lastCheckDate=Date.now(),lowestPrice=null,highestPrice=null,priceHistory={},rating=null){super(lastCheckDate,lowestPrice,highestPrice,priceHistory);this.rating=rating}static fromObject(obj){const{lastCheckDate,lowestPrice,highestPrice,priceHistory,rating}=obj;return new RatedProductData(lastCheckDate,lowestPrice,highestPrice,priceHistory,rating)}}


class PriceData{constructor(current,lowest,highest){this.current=current;this.lowest=lowest;this.highest=highest}}


function getDateTimestamp(){const now=new Date;now.setHours(0,0,0,0);// Set to start of the day
return now.getTime()}function getLocalDateFromTimestamp(timestamp){return new Date(timestamp).toLocaleDateString()}


class DatedValue{constructor(value,date=getDateTimestamp()){this.value=value;this.date=date}}


const elementTagNames=["table","tr","th","td"];const{createTable,createTr,createTh,createTd}=Object.fromEntries(elementTagNames.map((tagName=>[`create${capitalize(tagName)}`,(styles={},innerHTML=null)=>createElement(tagName,styles,innerHTML)])));function createTableWithHeaders(tableStyles={},trStyles={},thStyles={},headers={}){const table=createTable(tableStyles);const tr=createTr(trStyles);headers.forEach((header=>{const th=createTh(thStyles,header);tr.appendChild(th)}));table.appendChild(tr);return table}


const DEFAULT_MODAL_STYLES={position:"fixed",top:"50%",left:"50%",transform:"translate(-50%, -50%)",backgroundColor:"white",padding:"20px",border:"1px solid #ccc",boxShadow:"0 4px 8px rgba(0, 0, 0, 0.1)",maxWidth:"80%",maxHeight:"70%",overflowY:"auto",zIndex:"1000"};const DEFAULT_CLOSE_BUTTON_STYLES={position:"absolute",top:"0px",right:"8px",fontSize:"24px",cursor:"pointer",color:"#000"};function createModal(styles=DEFAULT_MODAL_STYLES){const modal=createDiv(styles);const closeButton=createCloseButton(modal);modal.appendChild(closeButton);document.addEventListener("click",(event=>handleClickOutside(event,modal)));modal.addEventListener("click",(event=>{event.stopPropagation()}));return modal}function createCloseButton(modal,styles=DEFAULT_CLOSE_BUTTON_STYLES){const closeButton=createButton(styles,"×");closeButton.addEventListener("click",(()=>{closeModal(modal)}));return closeButton}function closeModal(modal){modal.remove();document.removeEventListener("click",(event=>handleClickOutside(event,modal)))}function handleClickOutside(event,modal){modal.contains(event.target)||closeModal(modal)}


function getDeviationColor(oldValue,currentValue,maxDeviationPercentage=50){
// Calculate the percentage deviation
const deviationPercentage=Math.abs(oldValue-currentValue)/oldValue*100;
// Calculate the alpha channel: the greater the deviation, the more opaque the color
const alpha=Math.min(1,Math.max(0,deviationPercentage/maxDeviationPercentage));
// If the old value is greater than the current value, use a red hue (0)
// If the old value is less than or equal to the current value, use a green hue (90)
const hue=oldValue>currentValue?0:90;// 0 - red, 90 - green
// Fixed saturation and lightness values for color
const saturation=100;// Full saturation
const lightness=35;// Darker shade for better visibility
// Return the HSLA color with the calculated alpha value
return`hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`}


async function appendPriceHistory(priceContainer,priceSpan,productArticle){const currentPriceValue=getElementInnerNumber(priceSpan,true);if(!currentPriceValue)return null;const productStorageKey=`product-${productArticle}`;const storedProduct=getStorageValue(productStorageKey);let currentProduct=getCurrentProduct(storedProduct);const lowestPriceKey="lowestPrice";const highestPriceKey="highestPrice";currentProduct=updateAndAppendStoredPriceValue(currentProduct,lowestPriceKey,(storedPrice=>currentPriceValue<=storedPrice.value),currentPriceValue,"Мин. цена","#d6f5b1",priceContainer);currentProduct=updateAndAppendStoredPriceValue(currentProduct,highestPriceKey,(storedPrice=>currentPriceValue>=storedPrice.value),currentPriceValue,"Макс. цена","#fed2ea",priceContainer);currentProduct=updatePriceHistory(currentProduct,currentPriceValue);currentProduct.updateLastCheckDate();const{lowestPriceValue,highestPriceValue}=currentProduct;await setStorageValueAsync(productStorageKey,currentProduct);return new PriceData(currentPriceValue,lowestPriceValue,highestPriceValue)}function getCurrentProduct(storedProduct){if(!storedProduct)return new ProductData;return storedProduct.rating?RatedProductData.fromObject(storedProduct):ProductData.fromObject(storedProduct)}function updateAndAppendStoredPriceValue(product,priceKey,compareCondition,currentPriceValue,label,color,priceContainer){let storedPrice=product[priceKey];if(currentPriceValue){if(!storedPrice||compareCondition(storedPrice)){const currentPrice=new DatedValue(currentPriceValue);product[priceKey]=currentPrice;storedPrice=currentPrice}}else if(!storedPrice)return product;const{priceHistory}=product;appendStoredPriceValue(label,storedPrice,color,priceContainer,priceHistory,currentPriceValue);return product}function appendStoredPriceValue(label,storedPrice,color,priceContainer,priceHistory,currentPrice){const divContent=`${label}: `;const divStyle={color:"#000",fontSize:"16px",padding:"17px 0px 7px"};const storedPriceContainer=createDiv(divStyle,divContent);const spanText=`${storedPrice.value.toLocaleString()} ₽`;const spanStyle={fontWeight:"bold",padding:"6px 12px",borderRadius:"8px",cursor:"pointer",background:color};const storedPriceSpan=createSpan(spanStyle,spanText);storedPriceSpan.addEventListener("mouseover",(()=>{storedPriceSpan.textContent=getLocalDateFromTimestamp(storedPrice.date)}));storedPriceSpan.addEventListener("mouseleave",(()=>{storedPriceSpan.textContent=spanText}));storedPriceSpan.addEventListener("click",(event=>{event.stopPropagation();event.preventDefault();
// priceHistory = generateTestData(350); // Генерируем 350 записей
showPriceHistoryInModal(priceHistory,currentPrice)}));storedPriceContainer.append(storedPriceSpan);priceContainer.parentNode.append(storedPriceContainer)}function showPriceHistoryInModal(priceHistory,currentPrice){const modal=createModal();const tableStyles={width:"100%",borderCollapse:"collapse",marginTop:"16px"};const headerRowStyles={borderTop:"1px solid #ccc"};const headerCellStyles={padding:"8px",textAlign:"left"};const rowStyles={borderTop:"1px solid #ccc"};const cellStyles={padding:"8px"};const headers=["Дата","Мин. цена","Макс. цена"];const table=createTableWithHeaders(tableStyles,headerRowStyles,headerCellStyles,headers);
// currentPrice = 125;
Object.entries(priceHistory).forEach((([timestamp,{lowest,highest}])=>{const rowContent=[getLocalDateFromTimestamp(+timestamp),lowest,highest];const row=createTr(rowStyles);rowContent.forEach(((content,index)=>{const cell=createTd(cellStyles,content);index!==0&&(cell.style.background=getDeviationColor(content,currentPrice));row.appendChild(cell)}));table.appendChild(row)}));modal.appendChild(table);document.body.appendChild(modal)}function updatePriceHistory(currentProduct,currentPriceValue){const{priceHistory}=currentProduct;const currentDate=getDateTimestamp();const currentDatePriceHistory=priceHistory[currentDate]||{};const lowestPrice=Math.min(currentDatePriceHistory.lowest??currentPriceValue,currentPriceValue);const highestPrice=Math.max(currentDatePriceHistory.highest??currentPriceValue,currentPriceValue);currentProduct.priceHistory[currentDate]={lowest:lowestPrice,highest:highestPrice};return currentProduct}function checkIfGoodPrice(priceContainerWrap,productCard,priceTolerancePercentValue){const currentPrice=productCard.getAttribute(CURRENT_PRICE_ATTR);const lowestPrice=productCard.getAttribute(LOWEST_PRICE_ATTR);const priceToleranceFactor=1+priceTolerancePercentValue/100;const goodPrice=lowestPrice*priceToleranceFactor;if(currentPrice<=goodPrice){priceContainerWrap.style.border="3px solid rgb(214, 245, 177)";priceContainerWrap.style.borderRadius="14px";priceContainerWrap.style.padding="4px 10px 6px";priceContainerWrap.style.marginBottom="5px";priceContainerWrap.style.width="-webkit-fill-available";productCard.setAttribute(GOOD_PRICE_ATTR,"")}else{const stylePropertiesToRemove=["border","borderRadius","padding","marginBottom","width"];stylePropertiesToRemove.forEach((property=>priceContainerWrap.style.removeProperty(property)));productCard.removeAttribute(GOOD_PRICE_ATTR)}}


const SELECTORS={SIDE_CONTAINER:".product-page__aside-container",PRICE_CONTAINER:".price-block__content",WALLET_PRICE:".price-block__wallet-price",PRICE:".price-block__price"};async function initProductPageMods(){await initAppendPriceHistory()}async function initAppendPriceHistory(){const sideContainer=await utils_waitForElement(document,SELECTORS.SIDE_CONTAINER);if(!sideContainer)return;const priceContainer=helpers_getFirstElement(SELECTORS.PRICE_CONTAINER,sideContainer);if(!priceContainer)return;const priceSpan=getPriceSpan(priceContainer,SELECTORS);if(!priceSpan)return;const productArticle=getProductArticleFromPathname();await appendPriceHistoryIfNeeded(priceContainer,priceSpan,productArticle)}async function appendPriceHistoryIfNeeded(priceContainer,priceSpan,productArticle){const priceContainerWrap=priceContainer.parentNode;if(priceContainerWrap.hasAttribute(APPEND_PRICE_HISTORY_PASSED_ATTR))return;await appendPriceHistory(priceContainer,priceSpan,productArticle);priceContainerWrap.setAttribute(APPEND_PRICE_HISTORY_PASSED_ATTR,"")}function getProductArticleFromPathname(){return getURLPathElementEnding(2,"unknown")}


const favorites_SELECTORS={FILTER_CONTAINER:".favorites-goods__head",PRODUCT_LIST_CONTAINER:".favorites-goods",PRODUCT_CARDS:".favorites-goods__list > .goods-card",WALLET_PRICE:".wallet-price",PRICE:".goods-card__price-now"};const favorites_nameFilter=new StoredInputValue("favorites-name-filter",null,addProcessListToQueue);const bestPriceFilter=new StoredInputValue("best-price-filter",false,addProcessListToQueue);const onPriceTolerancePercentChange=()=>addProcessListToQueue(true);const priceTolerancePercent=new StoredInputValue("price-tolerance-percent",3,onPriceTolerancePercentChange);const inStockOnlyFilter=new StoredInputValue("in-stock-only-filter",true,addProcessListToQueue);const favorites_filterEnabled=new StoredInputValue("favorites-filter-enabled",true,addProcessListToQueue);let processListQueue=Promise.resolve();async function initFavoritesMods(){const filterContainer=await utils_waitForElement(document,favorites_SELECTORS.FILTER_CONTAINER);appendFilterControlsIfNeeded(filterContainer,favorites_appendFiltersContainer);await addProcessListToQueue();const observer=new MutationObserver(debounce(addProcessListToQueue));const productListContainer=helpers_getFirstElement(favorites_SELECTORS.PRODUCT_LIST_CONTAINER);observer.observe(productListContainer,{childList:true,subtree:true})}function favorites_appendFiltersContainer(filtersContainer,parentNode){setCommonFiltersContainerStyles(filtersContainer);const nameFilterDiv=createNameFilterControl(favorites_nameFilter,CONTROL_STYLE,TEXT_INPUT_STYLE);const bestPriceDiv=createFilterControlCheckbox("Лучшая цена: ",bestPriceFilter,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);const priceTolerancePercentDiv=createFilterControlNumber("Допуск цены, %: ",priceTolerancePercent,1,0,100,CONTROL_STYLE,NUMBER_INPUT_STYLE);const inStockOnlyFilterDiv=createFilterControlCheckbox("В наличии: ",inStockOnlyFilter,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);const filterEnabledDiv=createEnabledFilterControl(favorites_filterEnabled,CONTROL_STYLE,CHECKBOX_INPUT_STYLE);filtersContainer.append(nameFilterDiv,bestPriceDiv,priceTolerancePercentDiv,inStockOnlyFilterDiv,filterEnabledDiv);parentNode.append(filtersContainer)}async function addProcessListToQueue(priceTolerancePercentChanged=false){processListQueue=processListQueue.then((()=>processList(priceTolerancePercentChanged)))}async function processList(priceTolerancePercentChanged=false){const productCards=[...getAllElements(favorites_SELECTORS.PRODUCT_CARDS)];await Promise.all(productCards.map((async productCard=>{if(!favorites_filterEnabled.value){showElement(productCard);return}const priceContainer=helpers_getFirstElement(".goods-card__price",productCard);if(!priceContainer){showHideElement(productCard,inStockOnlyFilter.value);return}await handlePriceData(productCard,priceContainer,priceTolerancePercentChanged);const productCardNameWrap=helpers_getFirstElement(PRODUCT_CARD_NAME_SELECTOR,productCard);if(!productCardNameWrap){hideElement(productCard);return}const productCardName=productCardNameWrap.innerText;productCardNameWrap.title=productCardName;const conditionToHide=isNotMatchTextFilter(productCardName,favorites_nameFilter)||isNotMatchBestPriceFilter(productCard);showHideElement(productCard,conditionToHide)})))}async function appendStoredPriceValuesIfNeeded(productCard,priceContainer){if(productCard.hasAttribute(APPEND_STORED_PRICE_VALUES_PASSED_ATTR))return;const outOfStock=helpers_getFirstElement(".goods-card__out-stock",productCard);if(outOfStock){productCard.setAttribute(APPEND_STORED_PRICE_VALUES_PASSED_ATTR,"");return}const priceContainerWrap=priceContainer.parentNode;await appendStoredPriceValues(priceContainer,productCard,priceContainerWrap);productCard.hasAttribute(CURRENT_PRICE_ATTR)&&productCard.hasAttribute(LOWEST_PRICE_ATTR)&&checkIfGoodPrice(priceContainerWrap,productCard,priceTolerancePercent.value)}async function appendStoredPriceValues(priceContainer,productCard,priceContainerWrap){const priceSpan=getPriceSpan(productCard,favorites_SELECTORS);const productCardLink=helpers_getFirstElement("a",productCard);if(!priceSpan||!productCardLink)return;const productArticle=getProductArticleFromLink(productCardLink);const priceData=await appendPriceHistory(priceContainer,priceSpan,productArticle);if(priceData){productCard.setAttribute(CURRENT_PRICE_ATTR,priceData.current);productCard.setAttribute(LOWEST_PRICE_ATTR,priceData.lowest);priceContainerWrap.style.display="block"}helpers_getFirstElement(".goods-card__similar",priceContainerWrap)?.remove();productCard.setAttribute(APPEND_STORED_PRICE_VALUES_PASSED_ATTR,"")}async function handlePriceData(productCard,priceContainer,priceTolerancePercentChanged){await appendStoredPriceValuesIfNeeded(productCard,priceContainer);if(!priceTolerancePercentChanged||!productCard.hasAttribute(CURRENT_PRICE_ATTR)||!productCard.hasAttribute(LOWEST_PRICE_ATTR))return;const priceWrapper=priceContainer.parentNode;checkIfGoodPrice(priceWrapper,productCard,priceTolerancePercent.value)}function isNotMatchBestPriceFilter(productCard){return!!bestPriceFilter.value&&!productCard.hasAttribute(GOOD_PRICE_ATTR)}


const getAllKeys=window.GM_listValues;function runMigrationTaskIfNeeded(migrationTask,actualDbVersion,test=false){const dbVersion=getStorageValue("dbVersion");if(dbVersion===actualDbVersion)return;migrationTask();if(test)return;setStorageValue("dbVersion",actualDbVersion)}function processEntriesByKeyFilter(keyFilterCondition,processEntry,log=true){const allKeys=getAllKeys();const filteredKeys=allKeys.filter(keyFilterCondition);processEntriesByKeys(filteredKeys,processEntry,log)}function processEntriesByKeys(keys,processEntry,log){let processedCount=0;keys.forEach((key=>{const value=getStorageValue(key);log&&console.log(`${key}: ${value}`);processEntry(key,value);processedCount+=1}));log&&console.log(`Total entries processed: ${processedCount}`)}


const ACTUAL_DB_VERSION=1;function runMigration(){runMigrationTaskIfNeeded(migrationTask,ACTUAL_DB_VERSION,false)}function migrationTask(){const keyFilterCondition=key=>key.startsWith("product-");const processEntry=(key,value)=>{updateProductLastCheckDate(key,"lastCheckDate",value);updateProductPriceDate(key,"lowestPrice",value);updateProductPriceDate(key,"highestPrice",value)};processEntriesByKeyFilter(keyFilterCondition,processEntry,true)}function updateProductLastCheckDate(entryKey,productPropKey,value){const lastCheckDate=value[productPropKey];if(lastCheckDate){const[day,month,year]=lastCheckDate.split(".").map(Number);const dateObject=new Date(year,month-1,day);const timestamp=dateObject.getTime();value[productPropKey]=timestamp;setStorageValue(entryKey,value)}}function updateProductPriceDate(entryKey,productPropKey,value){const datedPrice=value[productPropKey];if(datedPrice){const dateString=datedPrice.date;const[day,month,year]=dateString.split(".").map(Number);const dateObject=new Date(year,month-1,day);const timestamp=dateObject.getTime();datedPrice.date=timestamp;value[productPropKey]=datedPrice;setStorageValue(entryKey,value)}}


runMigration();(function(){const{head}=document;const headObserver=new MutationObserver(debounce(addInitModsToQueue,750));headObserver.observe(head,{childList:true})})();let initModsQueue=Promise.resolve();async function addInitModsToQueue(){initModsQueue=initModsQueue.then(initMods)}async function initMods(){try{somePathElementEquals("catalog")||somePathElementEquals("brands")?pathnameIncludes("detail")?await initProductPageMods():initProductListMods():somePathElementEquals("favorites")&&await initFavoritesMods()}catch(error){console.error("Error in initMods:",error)}}})();